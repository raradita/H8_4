Linl github : https://github.com/raradita/H8_4.git
https://github.com/raradita/H8_4/tree/main/Final_Project_1


# Final Project 1 Linear Regresion

Nama Anggota Kelompok :
1. Dwi Ratna
2. Rara Dita Purnama Reta
3. Muhammad Daffa Izzuddin
## **Latar Belakang**

Uber dan Lyft adalah layanan transportasi online yang memungkinkan pengguna menyewa kendaraan dengan pengemudi melalui situs web atau aplikasi seluler. Uber adalah perusahaan global yang tersedia di 69 negara dan sekitar 900 kota di seluruh dunia. Lyft, di sisi lain, hanya beroperasi di sekitar 644 kota di AS dan 12 kota di Kanada. Namun, di AS, ini adalah perusahaan ridesharing terbesar kedua dengan pangsa pasar 31%.


Kami tertarik dengan dataset Uber dan Lyft. Dari data yang tersimpan, dapat memunculkan prediksi ke depannya. Data-data histori pemesanan taksi online, dapat dimanfaatkan untuk mencatat tarif berdasarkan faktor-faktor pengaruhnya.

Kumpulan data yang digunakan dalam artikel ini telah diimpor dari : Kaggle
Data telah dikumpulkan dari berbagai sumber, termasuk pengumpulan data real-time menggunakan kueri Uber dan Lyft API (Application Programming Interface). Dengan Jumlah data 693071 baris dan 57 kolom, Atribut yang menjadi target yaitu atribut Price/Tarif, sedangkan atribut lainnya merupakan prediktor. 

Objective yang ingin dicapai dalam analisis ini yaitu:

1. Dapat mengetahui faktor-faktor yang berpengaruh signifikan dalam memprediksi tarif harga Taksi Online

2. Mengimplementasi metode regresi linier dalamt memprediksi tarif harga Taksi Online berdasarkan faktor-faktor yang mempengaruhinya.
### **Import Libraries**
%matplotlib inline
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
import seaborn as sns
import datetime
import calendar
from datetime import date
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from mlxtend.feature_selection import SequentialFeatureSelector as SFS
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import f_regression
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics
from sklearn.metrics import mean_squared_error
from sklearn.pipeline import make_pipeline
from sklearn.feature_selection import f_regression
import pickle

print('Librari siap digunakan!')
### **Data Loading**
Unggah Data, Melihat ukuran data, Melihat isi data teratas 
df = pd.read_csv ("/Users/raraditapurnamareta/H8_4/Final_Project_1/rideshare_kaggle.csv")
print("Dataset berisi {} baris dan {} kolom (atribut)".format(df.shape[0], df.shape[1]))
df.head()
Melihat 5 baris data terbawah
df.tail(5)
Melihat informasi kolom, baris, dan data type
df.info()
Dari tahap melihat informasi kolom, baris, dan data type terdapat atribut yang memiliki kesamaan atau dapat diwakilkan dengan atribut yang lain, dataset memiliki baris yang banyak yaitu 693071 baris.
Menampilkan rincian nama kolom 
df.columns
Mengecek missing value dengan [.isnull()]() serta menjumlahkannya dengan menambah [.sum]()
df.isnull().sum()
Terdapat 55095 nilai yang kosong pada atribut 'Price'.
Mengecek statistik deskriptif dari masing-masing atribut yang bertipe numeric.
df.describe()
Mengecek statistik deskriptif dari masing-masing atribut yang bertipe object
df.describe(include='O')
Melihat banyaknya unique values untuk tiap atribut.
for col in df.columns:
    print(col,': ', df[col].nunique())
Melihat unique value untuk atribut 'cab_type'
df['cab_type'].unique()
## **Data Cleaning**
### Cek duplikasi data
Mengecek missing value pada atribut Price
df['price'].isnull().sum()
Terdapat 55095 baris yang merupakan missing value.
Perlu dilakukan penanganan terhadap missing value ini.
print(df['price'].isnull().sum()/df.shape[0] * 100, '%')
Terdapat 7.9% merupakan missing values dari keseluruhan dataset pada atribut Price
Selanjutnya penanganan missing values dengan menghapus baris yang merupakan missing value menggunakan .drop
df2 = df.drop(df[df['price'].isnull()].index)
Membandingkan ukuran matriks dataset sebelum dan sesudah dilakukan penanganan missing values.
df.shape, df2.shape
Cek missing value, untuk memastikan bahwa tidak ada lagi missing value
df2.isnull().sum()
Melakukan crosstab pada atribut product_id dan name.
pd.crosstab(df.product_id, df.name)
Diperoleh hasil bahwa kedua atribut tersebut sama, sehingga akan dilakukan penghapusan atribut product_id.
Melakukan inisiasi atribut yang akan dihapus.
remove1_cols = ["id", "timestamp", "timezone", "product_id", "latitude", "longitude"]

remove2_cols = ["precipIntensity", "precipProbability", "windGustTime", "temperatureHigh", "temperatureHighTime", "temperatureLow", 
                "temperatureLowTime", "apparentTemperatureHigh", "apparentTemperatureHighTime", "apparentTemperatureLow", 
                "apparentTemperatureLowTime", "icon", "dewPoint", "windBearing", "uvIndex", "visibility.1", "ozone", "sunriseTime", 
                "sunsetTime", "uvIndexTime", "temperatureMin", "temperatureMinTime", "temperatureMax", "temperatureMaxTime", 
                "apparentTemperatureMin", "apparentTemperatureMinTime", "apparentTemperatureMax", "apparentTemperatureMaxTime", 
                "apparentTemperature"]
Melakukan penghapusan atribut
df3 = df2.drop(remove1_cols, axis=1)

df3 = df3.drop(remove2_cols, axis=1)
Melihat isi data teratas dari dataset terbaru
df3.head()
Memberikan nama baru untuk setiap atribut.
df3 = df3.rename(columns={'hour':'Jam', 'day':'Hari','month':'Bulan', 'source':'Asal', 'destination': 'Tujuan','cab_type':'Merek',
                        'name':'Produk','price':'Tarif','distance':'Jarak', 'temperature':'Suhu','humidity':'Kelembapan','short_summary':'Cuaca',
                        'pressure':'Tekanan', 'datetime':'Tanggal','long_summary':'Keterangan', 'surge_multiplier':'Surge_multiplier','windSpeed':'Kecepatan_angin', 'windGust':'Hembusan_angin','cloudCover':'Tutupan_awan', 
                        'visibility':'Visibilitas', 'moonPhase':'Fase_bulan','precipIntensityMax':'Intensitas_maks'})
df3.head()
Memberikan nama baru untuk nilai dalam atribut Produk
df3.loc[df3['Produk'] == 'Taxi', 'Produk'] = 'Uber Taxi'
df3.loc[df3['Produk'] == 'Shared', 'Produk'] = 'Lyft Shared'
df3.loc[df3['Produk'] == 'Lux', 'Produk'] = 'Lyft Lux'
df3.loc[df3['Produk'] == 'Lyft', 'Produk'] = 'Lyft Regular'
df3.loc[df3['Produk'] == 'Black SUV', 'Produk'] = 'Uber Black SUV'
df3.loc[df3['Produk'] == 'WAV', 'Produk'] = 'Uber WAV'
df3.loc[df3['Produk'] == 'Black', 'Produk'] = 'Uber Black'
df3.head()
Melihat banyaknya nilai dari masing-masing atribut
for col in df3.columns:
    print(col,': ')
    print(df3[col].value_counts())
    print("  ")
    print("  ")
Membuat atribut baru yakni Tarif_per_mile dimana diperoleh dari perhitungan Tarif dibagi Jarak
df4 = df3.copy()

df4["Tarif_per_mile"] = df4["Tarif"] / df4["Jarak"]
df4.head()
Membuat atribut baru yaitu Weekname mengekstrak hari dari atribut Tanggal
df4['Tanggal'] = df4['Tanggal'].apply(lambda x: datetime.datetime.strptime(x, "%Y-%m-%d %H:%M:%S"))
df4['Weekname'] = df4['Tanggal'].apply(lambda x: calendar.day_name[x.weekday()])
df4.head()
### Menghapus atribut Tanggal, karena dapat diwakilkan oleh atribut Hari, Bulan, dan Weekname
df4 = df4.drop(["Tanggal"], axis=1)
df4.head()
Membuat atribut baru yakni Rute dengan menggabungkan atribut Asal dan Tujuan
menambahkan uniq value
df4["Rute"] = df4["Asal"] + "-" + df4['Tujuan']
df4["Rute"]
df4.head()
# **Exploratory Data Analysis**
## Descriptive Statistics & Query
Melihat statistik descriptif pada data numerik
df4.describe()
Hasil dari tahap diatas :

- Jarak terjauh 7.86 miles dengan tarif max 97.5 dollar
- Suhu rata-rata berada pada 39.58derajat Fahrenheit
- Rata-rata pemesanan Taksi Online berada pada jam 11
Melihat statistik descriptif pada data kategorik
df4.describe(include='O')
Dari  tahap di atas diperoleh:

- Terdapat 12 tempat asal dan tujuan
- Terdapat 2 merek taksi online pada dataset ini, yakni Uber dan Lyft
- Cuaca yang paling sering muncul yakni Overcast
- Hari dengan paling banyak pemesanan taksi online yakni Tuesday
- Rute paling banyak dipesan yakni Financial District-South Station
Grouping pada atribut Merek dan Tarif untuk melihat rata-ratanya
mean1 = df4[['Merek','Tarif']].groupby('Merek').mean().sort_values(by='Tarif', ascending=True)
mean1
Uber memiliki Tarif rata-rata yakni 15.79 dollars, sedangkan Lyft yaitu 17.35 dollars
Melakukan crosstab pada atribut Merek dan Produk untuk melihat proporsi dataset
pd.crosstab(df4.Merek, df4.Produk)
Dataset sudah diklasifikasikan dengan benar, yakni Produk dengan Merek yang sesuai, juga untuk proporsi data tidak memiliki perbedaan yang signifikan atau relatif sama.
Melakukan crosstab pada atribut Merek dan Tujuan
pd.crosstab(df4.Merek, df4.Tujuan)
Pada semua Tujuan, Merek Uber memiliki proporsi data yang lebih tinggi dari pada Merek Lyft.
##  Boxplot
Melakukan visualisasi Boxplot untuk melihat distribusi data, outlier data
fig, ax = plt.subplots(figsize=(9, 5))

sns.boxplot(x='Merek', y='Tarif', data=df4, palette="cividis")

plt.xlabel("Merek", fontsize= 12)
plt.ylabel("Tarif", fontsize= 12)
plt.title("Tarif vs Merek", fontsize= 15)
Pada Boxplot Lyft dan Uber saling memiliki outlier yang cukup banyak, distribusi data tidak jauh berbeda.
sns.catplot(x="Tarif", y="Cuaca", hue="Merek", kind="boxen", 
            data=df4, palette='cividis')
Distribusi Cuaca terhadap Tarif tidak terlalu berbeda signifikan, serta memiliki banyak outlier.
Menambahkan tes anova 
fig, ax = plt.subplots(figsize=(9, 5))

sns.boxplot(x='Merek', y='Jarak', data=df4, palette="cividis")

plt.xlabel("Merek", fontsize= 12)
plt.ylabel("Jarak", fontsize= 12)
plt.title("Jarak vs Merek", fontsize= 15)

Uber memiliki jangkauan jarak yang cukup jauh dengan Lyft serta outlier Uber juga lebih banyak dari Lyft.
## Histogram
Melakukan visualisasi histogram untuk melihat proporsi data.
sns.countplot(x="Merek", data=df4)
plt.show()
Proporsi data antara Merek Lyft dan Uber tidak berbeda signifikan.
## Correlation Matrix
Melakukan visualisasi korelasi antar variabel untuk melihat hubungan.
plt.figure(figsize=(16, 9))
sns.heatmap(df4.corr(), vmin=-1, vmax=1, annot=True)
plt.show()
Dari tahapan di atas diperoleh:

- Atribut hari, suhu, kelembapan, fase bulan memiliki korelasi negatif dengan Tarif.
- Atribut selain yang disebutkan di atas memiliki korelasi positif terhadap Tarif.
- Korelasi paling tinggi yakni tarif dengan jarak, diikuti oleh tarif dengan surge multiplier.
## **Data Preprocessing**
Melakukan inisiasi variabel X dan Y
X = df4.drop(['Tarif', 'Tarif_per_mile'], axis=1)
y = df4['Tarif']
print(X.shape)
print(y.shape)
### Encode
Melakukan encoding dengan Label Encoder pada atribut yang memiliki tipe data Object
class MultiColumnLabelEncoder:
    def __init__(self,columns = None):
        self.columns = columns

    def fit(self,X,y=None):
        return self

    def transform(self,X):
        output = X.copy()
        if self.columns is not None:
            for col in self.columns:
                output[col] = LabelEncoder().fit_transform(output[col])
        else:
            for colname,col in output.iteritems():
                output[colname] = LabelEncoder().fit_transform(col)
        return output

    def fit_transform(self,X,y=None):
        return self.fit(X,y).transform(X)
    
    
encoding_pipeline = Pipeline([
    ('encoding',MultiColumnLabelEncoder(columns=["Asal", "Tujuan", "Merek", "Produk", "Cuaca", "Keterangan",
                                                 "Weekname", "Rute"]))
])
df5 = encoding_pipeline.fit_transform(df4)
Melihat isi data teratas
df5.head()
Melakukan inisiasi variabel X dan Y sesudah dilakukan encode
X_transform = df5.drop(['Tarif', 'Tarif_per_mile'], axis=1)
y = df4['Tarif']
print(X.shape)
print(y.shape)
### Feature Selection
Melakukan feature selection menggunakan library SequentialFeatureSelector dengan Metode linear
regression, banyak atribut 10, metode forward, evaluasi dengan R squared, dan cv dengan k=3.
sfs = SFS(LinearRegression(),
          k_features=10,
          forward=True,
          floating=False,
          scoring = 'r2', 
          cv = 3)

sfs.fit(X_transform, y)
sfs.k_feature_names_
Diperoleh hasil dengan 10 feature atau atribut yang paling berpengaruh dalam model.
Melakukan feature selection menggunakan library F regression dengan k=10
X_transform = df5.drop(['Tarif', 'Tarif_per_mile'], axis=1)

bestfeatures = SelectKBest(score_func=f_regression, k=10)
fit = bestfeatures.fit(X_transform,y)
dfscores = pd.DataFrame(fit.scores_)
dfcolumns = pd.DataFrame(X_transform.columns)
 
featureScores = pd.concat([dfcolumns,dfscores],axis=1)
featureScores.columns = ['Specs','Score']

print("best 10 features are")
print(featureScores.nlargest(10,'Score'))
Hasil yang didapatkan feature atau atribut yang paling berpengaruh pada model.
Memilih 8 atribut yang paling berpengaruh signifikan berdasarkan kedua uji feature selection yang telah dilakukan, yakni atribut produk, jarak, surge_multiplier, merek, tujuan, asal, Weekname, dan visibilitas.
X_fit = df5[['Produk', 'Jarak', 'Surge_multiplier', 'Merek', 'Tujuan', 'Asal',
            'Weekname', 'Visibilitas']]
Melihat isi data teratas dari dataframe X_fit
X_fit.head()
Melihat rincian dataframe X_fit
X_fit.info()
Melihat dimensi X_fit
X_fit.shape
Setelah diperoleh atribut yang akan dilakukan training, Selanjutnya membagi data menjadi Training dan Testing dengan proporsi 0.8 dan 0.2
X_train, X_test, y_train, y_test = train_test_split(
    X_fit, y, test_size=0.20, random_state=325)
## **Model Defining**
Metode pengujian pada training ini menggunakan metode linear regression dengan pembanding random forest regressor. 
Linear regression adalah teknik yang sederhana dan mudah diinterpretasikan, yang cocok untuk data yang memiliki hubungan linier antara variabel independen dan variabel dependen. Metode ini digunakan untuk memprediksi nilai variabel dependen berdasarkan nilai variabel independen dengan memperhitungkan hubungan linear antara keduanya.
Di sisi lain, random forest regressor adalah teknik yang lebih kompleks yang memanfaatkan sejumlah besar pohon keputusan untuk memprediksi nilai variabel dependen. Teknik ini cocok untuk data yang kompleks dan memiliki banyak variabel independen yang saling berinteraksi, serta dapat mengatasi masalah overfitting.

Alasan penggunaan metode ini yaitu tipe data prediksi yang berupa continuous data, sehingga metode tersebut cocok digunakan.
Model linear regression dengan menghilangkan nilai intercept. Penghilangan intercept dapat membantu dalam mengurangi heteroskedastisitas dan meningkatkan akurasi prediksi. Penghilangan intercept dikarenakan tarif tidak bisa berdiri sendiri tanpa adanya faktor yang mempengaruhinya. Jika tidak ada faktor atau dapat dikatakan tidak ada histori X maka tarif bernilai 0.
lr1 = LinearRegression(fit_intercept=False) 
Model kedua yakni model linear regression dengan melakukan normalisasi data menggunakan mean. Tujuan dari normalisasi adalah untuk mengubah skala data sehingga seluruh variabel independen memiliki rentang nilai yang serupa. Dalam model regresi linear, normalisasi dapat membantu meningkatkan akurasi model dan mengurangi pengaruh outlier. Setelah data dinormalisasi, langkah selanjutnya adalah membangun model regresi linear. Model ini akan memprediksi nilai variabel dependen berdasarkan nilai-nilai variabel independen yang telah dinormalisasi.
lr2 = make_pipeline(StandardScaler(with_mean=True), LinearRegression())
Variabel pada algoritma pembanding yang digunakan yaitu model Random Forest Regressor. Guna meningkatkan
akurasi dalam metode random forest, digunakan hyperparameter diantaranya n_estimators sejumlah 50, dikarenakan dataset ini memiliki baris yang sangat banyak sehingga cabang tree yang digunakan dapat diperkecil.
regr = RandomForestRegressor(n_estimators = 50, random_state = 13)
## **Model Training**

Cell pada bagian ini hanya berisi code untuk melatih model dan output yang dihasilkan.
lm_model1 = lr1.fit(X_train, y_train)
lm_model2 = lr2.fit(X_train, y_train)
regr_model = regr.fit(X_train, y_train)
## **Model Evaluation**

Pada bagian ini, dilakukan evaluasi model yang harus menunjukkan bagaimana performa model berdasarkan metrics yang dipilih.
y_pred = lm_model1.predict(X_test)
lr_train_r2 = lr1.score(X_train, y_train)
lr_test_r2 = lr1.score(X_test, y_test)
print('Linear Regression train R squared: %.4f' % lr_train_r2)
print('Linear Regression test R squared: %.4f' % lr_test_r2)

lr_mse = mean_squared_error(y_pred, y_test)
lr_rmse = np.sqrt(lr_mse)
print('Linear Regression test RMSE: %.4f' % lr_rmse)

x_axis = X_test.Jarak 

plt.scatter(x_axis, y_test, c = 'g', alpha = 0.5, marker = '.', label = 'Aktual')
plt.scatter(x_axis, y_pred, c = 'r', alpha = 0.5, marker = '.', label = 'Prediksi')
plt.xlabel('Jarak')
plt.ylabel('Tarif') 
plt.title("Perbandingan Prediksi dan Aktual")
plt.legend(loc = 'upper right')
plt.show()
y_pred = lm_model2.predict(X_test)
lr_train_r2 = lr2.score(X_train, y_train)
lr_test_r2 = lr2.score(X_test, y_test)
print('Linear Regression train R squared: %.4f' % lr_train_r2)
print('Linear Regression test R squared: %.4f' % lr_test_r2)

lr_mse = mean_squared_error(y_pred, y_test)
lr_rmse = np.sqrt(lr_mse)
print('Linear Regression test RMSE: %.4f' % lr_rmse)

x_axis = X_test.Jarak 

plt.scatter(x_axis, y_test, c = 'g', alpha = 0.5, marker = '.', label = 'Aktual')
plt.scatter(x_axis, y_pred, c = 'r', alpha = 0.5, marker = '.', label = 'Prediksi')
plt.xlabel('Jarak')
plt.ylabel('Tarif') 
plt.title("Perbandingan Prediksi dan Aktual")
plt.legend(loc = 'upper right')

plt.show()
predictions = regr.predict(X_test)
l_rf_train_r2 = regr.score(X_train,y_train)
l_rf_test_r2 = regr.score(X_test, y_test)
print('Random Forest train R squared is: %.4f' % l_rf_train_r2)
print('Random Forest test R squared": %.4f' % l_rf_test_r2)

l_forest_mse = mean_squared_error(predictions, y_test)
l_forest_rmse = np.sqrt(l_forest_mse)
print('Random Forest RMSE: %.4f' % l_forest_rmse)

x_axis = X_test.Jarak

# Build scatterplot
plt.scatter(x_axis, y_test, c = 'g', alpha = 0.5, marker = '.', label = 'Aktual')
plt.scatter(x_axis, predictions, c = 'r', alpha = 0.5, marker = '.', label = 'Prediksi')
plt.xlabel('Jarak')
plt.ylabel('Tarif') 
plt.title("Perbandingan Prediksi dan Aktual")
plt.grid(color = '#D3D3D3', linestyle = 'solid')
plt.legend(loc = 'upper left')
plt.show()
Dari Tahapan di atas diperoleh:

- Model kedua memiliki nilai evaluasi model yang lebih baik dibandingkan model pertama.
- Data yang dilakukan normalisasi memiliki evaluasi model lebih baik daripada yang tidak dilakukan normalisasi.
- Model ketiga yaitu model pembanding, memiliki evaluasi paling baik diantara model yang lain.
- Model akhir yang digunakan dalam analisis ini untuk selanjutnya diterapkan dalam deployment adalah model kedua, dikarenakan tujuan analisis ini membuat model prediksi menggunakan metode regresi linier.
- Model ketiga dapat digunakan menjadi alternatif lain di luar analisis ini.
## **Model Inference**

Bagian ini diisi dengan model inference, di mana model yang sudah kita latih akan dicoba pada data selain data yang sudah tersedia. Data yang dimaksud bisa berupa data buatan oleh student, ataupun data yang ada pada internet.
X_new = {'Produk':[1,2,3], 'Jarak':[1,2,3], 'Surge_multiplier':[1.25,2,3], 'Merek':[0,1,0], 'Tujuan':[1,2,3], 
         'Asal':[1,2,3],'Weekname':[1,2,3], 'Visibilitas':[1,2,3]}
X_new = pd.DataFrame(X_new)
Melakukan prediksi pada data baru
y_pred1 = lm_model2.predict(X_new)
print('Prediksi Tarif yaitu: ')
print(y_pred1)
## **Analysis**


1. Terdapat 56 atribut. Setelah dilakukan analisis, diambil 8 atribut/faktor yang paling berpengaruh dalam model.
2. Faktor-faktor yang berpengaruh signifikan terhadap tarif taksi online yaitu produk, jarak, surge multiplier, merek, tujuan, asal, hari dalam pekan, dan visibilitas.
3. Model regresi linier yang paling optimal yaitu model kedua, dengan normalisasi pada data dengan R squared train 0.4739 dan test 0.4754 diperoleh RMSE 6.7621.